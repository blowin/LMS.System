// <auto-generated />
using System;
using LMS.System.Domain.Services.DBServices.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LMS.System.Migrations.MSSQL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentType")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignments", (string)null);
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UsersId");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsersForEnrollmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UsersForEnrollmentId");

                    b.ToTable("Enrollments", (string)null);
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LessonType")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons", (string)null);
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gradle")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserForSubId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("UserForSubId");

                    b.ToTable("Submissions", (string)null);
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.TestAnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestQuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("TestAnswerOptions", (string)null);
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.TestQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("TestQuestions", (string)null);
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.TestSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<int>("TestQuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("TestSubmissions", (string)null);
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.Assignment", b =>
                {
                    b.HasOne("LMS.System.Domain.Services.DBServices.Models.Course", "CourseForAssignment")
                        .WithMany("AssignmentsInCourse")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseForAssignment");
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.Course", b =>
                {
                    b.HasOne("LMS.System.Domain.Services.DBServices.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.System.Domain.Services.DBServices.Models.User", "Users")
                        .WithMany("CoursesForUser")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.Enrollment", b =>
                {
                    b.HasOne("LMS.System.Domain.Services.DBServices.Models.Course", "CoursesForEnrollment")
                        .WithMany("EnrollmentInCourse")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.System.Domain.Services.DBServices.Models.User", "UsersForEnrollment")
                        .WithMany("EnrollmentForUsers")
                        .HasForeignKey("UsersForEnrollmentId");

                    b.Navigation("CoursesForEnrollment");

                    b.Navigation("UsersForEnrollment");
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.Lesson", b =>
                {
                    b.HasOne("LMS.System.Domain.Services.DBServices.Models.Course", "CourseForLesson")
                        .WithMany("LessonsInCourse")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseForLesson");
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.Submission", b =>
                {
                    b.HasOne("LMS.System.Domain.Services.DBServices.Models.Assignment", "SubmissionForAssignment")
                        .WithMany("SubmissionsInAssignment")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.System.Domain.Services.DBServices.Models.User", "UserForSub")
                        .WithMany("SubmissionsForUser")
                        .HasForeignKey("UserForSubId");

                    b.Navigation("SubmissionForAssignment");

                    b.Navigation("UserForSub");
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.TestAnswerOption", b =>
                {
                    b.HasOne("LMS.System.Domain.Services.DBServices.Models.TestQuestion", "TestQuestion")
                        .WithMany("TestAnswerOptions")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.TestQuestion", b =>
                {
                    b.HasOne("LMS.System.Domain.Services.DBServices.Models.Assignment", "Assignment")
                        .WithMany("TestQuestionsInAssignment")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.TestSubmission", b =>
                {
                    b.HasOne("LMS.System.Domain.Services.DBServices.Models.Submission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.System.Domain.Services.DBServices.Models.TestQuestion", "TestQuestion")
                        .WithMany("TestSubmissions")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.Assignment", b =>
                {
                    b.Navigation("SubmissionsInAssignment");

                    b.Navigation("TestQuestionsInAssignment");
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.Course", b =>
                {
                    b.Navigation("AssignmentsInCourse");

                    b.Navigation("EnrollmentInCourse");

                    b.Navigation("LessonsInCourse");
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.TestQuestion", b =>
                {
                    b.Navigation("TestAnswerOptions");

                    b.Navigation("TestSubmissions");
                });

            modelBuilder.Entity("LMS.System.Domain.Services.DBServices.Models.User", b =>
                {
                    b.Navigation("CoursesForUser");

                    b.Navigation("EnrollmentForUsers");

                    b.Navigation("SubmissionsForUser");
                });
#pragma warning restore 612, 618
        }
    }
}
